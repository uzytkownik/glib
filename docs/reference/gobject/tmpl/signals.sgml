<!-- ##### SECTION Title ##### -->
Signals

<!-- ##### SECTION Short_Description ##### -->
Signals provide a means for customization of object behaviour and are used
as general purpose notification mechanism.

<!-- ##### SECTION Long_Description ##### -->
<para>

</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT GSignalInvocationHint ##### -->
<para>
The @GSignalInvocationHint structure is used to pass on additional information
to callbacks during a signal emission.
</para>

@signal_id: The signal id of the signal invoking the callback
@detail: The detail passed on for this emission
@run_type: The stage the signal emission is currently in, this
		field will contain either of @G_SIGNAL_RUN_FIRST,
		@G_SIGNAL_RUN_LAST or @G_SIGNAL_RUN_CLEANUP.

<!-- ##### USER_FUNCTION GSignalAccumulator ##### -->
<para>
The signal accumulator is a special callback function that can be used
to collect return values of the various callbacks that are called
during a signal emission. The signal accumulator is at signal creation
time, if it is left NULL, no accumulation of callback return values is
perfomed, the return value of the signal emission is the value returned
by the last callback.
</para>

@ihint: Signal invokation hint, see @GSignalInvocationHint
@return_accu: Accumulator to collect callback return values in, this
		is the return value of the current signal emission
@return_value: The return value of the most recent callback function
@Returns: The accumulator function returns whether signal emission
		should be aborted. Returning @FALSE means to abort the
		current emission and @TRUE is returned for continuation.


<!-- ##### TYPEDEF GSignalCMarshaller ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GSignalEmissionHook ##### -->
<para>

</para>

@ihint: 
@n_param_values: 
@param_values: 
@Returns: 
<!-- # Unused Parameters # -->
@signal_id: 
@n_values: 
@values: 


<!-- ##### ENUM GSignalFlags ##### -->
<para>

</para>

@G_SIGNAL_RUN_FIRST: 
@G_SIGNAL_RUN_LAST: 
@G_SIGNAL_RUN_CLEANUP: 
@G_SIGNAL_NO_RECURSE: 
@G_SIGNAL_DETAILED: 
@G_SIGNAL_ACTION: 
@G_SIGNAL_NO_HOOKS: 

<!-- ##### ENUM GSignalMatchType ##### -->
<para>

</para>

@G_SIGNAL_MATCH_ID: 
@G_SIGNAL_MATCH_DETAIL: 
@G_SIGNAL_MATCH_CLOSURE: 
@G_SIGNAL_MATCH_FUNC: 
@G_SIGNAL_MATCH_DATA: 
@G_SIGNAL_MATCH_UNBLOCKED: 

<!-- ##### STRUCT GSignalQuery ##### -->
<para>
A structure holding in-depth information for a specific signal. It is
filled in by the @g_signal_query() function.
</para>

@signal_id:	The signal id of the signal being querried, or 0 if the
		signal to be querried was unknown
@signal_name:	The signal name
@itype:		The interface/instance type that this signal can be emitted for
@signal_flags:	The signal flags as passed in to @g_signal_new()
@return_type:	The return type for user callbacks
@n_params:	The number of parameters that user callbacks take
@param_types:	The individual parameter types for user callbacks, note that the
		effective callback signature is:
		@return_type callback (gpointer data1, @[parameters], gpointer data2);

<!-- ##### FUNCTION g_signal_newv ##### -->
<para>

</para>

@signal_name: 
@itype: 
@signal_flags: 
@class_closure: 
@accumulator: 
@c_marshaller: 
@return_type: 
@n_params: 
@param_types: 
@Returns: 


<!-- ##### FUNCTION g_signal_emitv ##### -->
<para>

</para>

@instance_and_params: 
@signal_id: 
@detail: 
@return_value: 


<!-- ##### FUNCTION g_signal_lookup ##### -->
<para>

</para>

@name: 
@itype: 
@Returns: 


<!-- ##### FUNCTION g_signal_name ##### -->
<para>

</para>

@signal_id: 
@Returns: 


<!-- ##### FUNCTION g_signal_query ##### -->
<para>
Query the signal system for in-depth information about a
specific signal. This function will fill in a user-provided
structure to hold signal-specific information. If an invalid
dignal id is passed in, the @signal_id member of the @GSignalQuery
is 0. All members filled into the @GSignalQuery structure should
be considered constant and have to be left untouched.
</para>

@signal_id:	The signal id of the signal to query information for
@query:		A user provided structure that is filled in with constant
		values upon success.


<!-- ##### FUNCTION g_signal_list_ids ##### -->
<para>
List the signals by id, that a certain instance or interface type
created. Further information about the signals can be aquired through
@g_signal_query().
</para>

@itype:		Instance or interface type
@n_ids:		Location to store the number of signal ids for @itype
@Returns:	Newly allocated array of signal ids


<!-- ##### FUNCTION g_signal_connect_closure ##### -->
<para>

</para>

@instance: 
@signal_id: 
@detail: 
@closure: 
@after: 
@Returns: 


<!-- ##### FUNCTION g_signal_handler_find ##### -->
<para>

</para>

@instance: 
@mask: 
@signal_id: 
@detail: 
@closure: 
@func: 
@data: 
@Returns: 


<!-- ##### FUNCTION g_signal_handler_block ##### -->
<para>

</para>

@instance: 
@handler_id: 


<!-- ##### FUNCTION g_signal_handler_unblock ##### -->
<para>

</para>

@instance: 
@handler_id: 


<!-- ##### FUNCTION g_signal_handler_disconnect ##### -->
<para>

</para>

@instance: 
@handler_id: 


<!-- ##### FUNCTION g_signal_has_handler_pending ##### -->
<para>

</para>

@instance: 
@signal_id: 
@detail: 
@may_be_blocked: 
@Returns: 


<!-- ##### FUNCTION g_signal_stop_emission ##### -->
<para>

</para>

@instance: 
@signal_id: 
@detail: 


<!-- ##### FUNCTION g_signal_type_closure_new ##### -->
<para>

</para>

@itype: 
@struct_offset: 
@Returns: 


<!-- ##### FUNCTION g_signal_add_emission_hook_full ##### -->
<para>

</para>

@signal_id: 
@closure: 
@Returns: 


<!-- ##### FUNCTION g_signal_remove_emission_hook ##### -->
<para>

</para>

@signal_id: 
@hook_id: 


<!-- ##### FUNCTION g_signal_handlers_destroy ##### -->
<para>

</para>

@instance: 


<!-- ##### FUNCTION g_signals_destroy ##### -->
<para>

</para>

@itype: 


