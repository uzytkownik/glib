<!-- ##### SECTION ./tmpl/param_specs.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/param_specs.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/param_specs.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/param_specs.sgml:Title ##### -->
Parameter Specifications


<!-- ##### STRUCT GBoxed ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GBoxedInitFunc ##### -->
<para>

</para>

@Returns: 

<!-- ##### STRUCT GObjectConstructParam ##### -->
<para>

</para>

@pspec: 
@value: 

<!-- ##### STRUCT GParamSpecClosure ##### -->
<para>

</para>

@parent_instance: 

<!-- ##### MACRO G_IS_PARAM_SPEC_CLOSURE ##### -->
<para>

</para>

@pspec: 

<!-- ##### MACRO G_PARAM_SPEC_CLOSURE ##### -->
<para>

</para>

@pspec: 

<!-- ##### FUNCTION g_closure_add_fnotify ##### -->
<para>

</para>

@closure: 
@notify_data: 
@notify_func: 

<!-- ##### FUNCTION g_closure_add_inotify ##### -->
<para>

</para>

@closure: 
@notify_data: 
@notify_func: 

<!-- ##### FUNCTION g_closure_remove_fnotify ##### -->
<para>

</para>

@closure: 
@notify_data: 
@notify_func: 

<!-- ##### FUNCTION g_closure_remove_inotify ##### -->
<para>

</para>

@closure: 
@notify_data: 
@notify_func: 

<!-- ##### FUNCTION g_param_spec_closure ##### -->
<para>

</para>

@name: 
@nick: 
@blurb: 
@flags: 
@Returns: 

<!-- ##### FUNCTION g_param_spec_string_c ##### -->
<para>

</para>

@name: 
@nick: 
@blurb: 
@default_value: 
@flags: 
@Returns: 

<!-- ##### FUNCTION g_signal_add_emission_hook_full ##### -->
<para>

</para>

@signal_id: 
@closure: 
@Returns: 

<!-- ##### MACRO g_signal_newc ##### -->
<para>

</para>

@Returns: 
@signal_name: 
@itype: 
@signal_flags: 
@class_offset: 
@accumulator: 
@accu_data: 
@c_marshaller: 
@return_type: 
@n_params: 
@Varargs: 

<!-- ##### FUNCTION g_type_check_class_cast ##### -->
<para>
</para>

@g_class: 
@is_a_type: 
@Returns: 

<!-- ##### FUNCTION g_type_check_flags ##### -->
<para>
Determines whether a given set of #GTypeFlags and #GTypeFundamentalFlags
are set for @type.
</para>

@type: 	  The type to check for flags.
@flags:   Bitwise combination of #GTypeFlags and #GTypeFundamentalFlags.
@Returns: #TRUE if all @flags are set for @type, #FALSE otherwise.

<!-- ##### FUNCTION g_type_check_instance ##### -->
<para>
Private helper function to aid implementation of the G_TYPE_CHECK_INSTANCE()
macro.
</para>

@instance: A valid #GTypeInstance structure.
@Returns:  #TRUE if @instance is valid, #FALSE otherwise.

<!-- ##### FUNCTION g_type_check_instance_cast ##### -->
<para>
</para>

@instance: 
@iface_type: 
@Returns: 

<!-- ##### FUNCTION g_type_check_value ##### -->
<para>
</para>

@value: 
@Returns: 

<!-- ##### FUNCTION g_type_class_is_a ##### -->
<para>
</para>

@g_class: 
@is_a_type: 
@Returns: 

<!-- ##### FUNCTION g_type_instance_is_a ##### -->
<para>
Determines if @instance adheres to the interface exported
by @iface_type. @iface_type is either a type that @instance
is derived from, or an interface type that is supported by
the anchestry of @instance.
</para>

@instance: 	A valid #GTypeInstance structure.
@iface_type: 	A #GType value.
@Returns: 	#TRUE if @instance conforms to @iface_type, #FALSE otherwise.

<!-- ##### FUNCTION g_type_test_flags ##### -->
<para>

</para>

@type: 
@flags: 
@Returns: 

<!-- ##### FUNCTION g_type_value_is_a ##### -->
<para>
Determines if @value is a #GValue whose type conforms to @type.
</para>

@value: 	  A valid #GValue structure.
@type:    A #GType value.
@Returns: #TRUE if @value is a #GValue of @type or #FALSE if not.

<!-- ##### FUNCTION g_value_convert ##### -->
<para>

</para>

@src_value: 
@dest_value: 
@Returns: 

<!-- ##### FUNCTION g_value_register_exchange_func ##### -->
<para>

</para>

@value_type1: 
@value_type2: 
@func: 

<!-- ##### FUNCTION g_value_types_exchangable ##### -->
<para>

</para>

@value_type1: 
@value_type2: 
@Returns: 

<!-- ##### FUNCTION g_values_exchange ##### -->
<para>

</para>

@value1: 
@value2: 
@Returns: 

