<!-- ##### SECTION Title ##### -->
Generic Values

<!-- ##### SECTION Short_Description ##### -->
A polymorphic type that can hold values of any other type.

<!-- ##### SECTION Long_Description ##### -->
<para>
The #GValue structure is basically a variable container that consists
of a type identifier and a specific value of that type.
The type identifier within a #GValue structure always determines the
type of the associated value.
To create a undefined #GValue structure, simply create a zero-filled
#GValue structure. To initialize the #GValue, use the g_value_init()
function. A #GValue cannot be used until it is initialized.
The basic type operations (such as freeing and copying) are determined
by the #GTypeValueTable associated with the type ID stored in the #GValue.
Other #GValue operations (such as converting values between types) are
provided by this interface.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
The fundamental types which all support #GValue operations and thus
can be used as a type initializer for g_value_init() are defined by
a separate interface.  See the Standard Values API for details.
</para>

<!-- ##### MACRO G_VALUE_HOLDS ##### -->
<para>
Returns #TRUE if @value holds (or contains) a value of @type.
This macro will also check for @value != #NULL and issue a
warning if the check fails.
</para>

@value: 
@type: 


<!-- ##### MACRO G_VALUE_TYPE ##### -->
<para>
Returns the type identifier of @value.
</para>

@value: A #GValue structure.


<!-- ##### MACRO G_VALUE_TYPE_NAME ##### -->
<para>
Returns the type name of @value.
</para>

@value: A #GValue structure.


<!-- ##### MACRO G_TYPE_IS_VALUE ##### -->
<para>
Return whether the passed in type ID can be used for g_value_init().
That is, this macro checks whether this type provides an implementation
of the #GTypeValueTable functions required for a type to create a #GValue of.
</para>

@type: 	  A #GType value.
@Returns: Whether @type is suitable as a #GValue type.


<!-- ##### MACRO G_TYPE_IS_VALUE_ABSTRACT ##### -->
<para>

</para>

@type: 


<!-- ##### MACRO G_IS_VALUE ##### -->
<para>
Returns #TRUE if @value is a valid and initialized #GValue structure.
</para>

@value: A #GValue structure.


<!-- ##### USER_FUNCTION GValueExchange ##### -->
<para>

</para>

@value1: 
@value2: 


<!-- ##### STRUCT GValue ##### -->
<para>
A mostly opaque structure used to hold a #GValue object.  Mostly because
the data within the structure has protected scope: it is accessible only
to functions within a #GTypeValueTable structure, or implementations of
the g_value_*() API.
</para>


<!-- ##### MACRO G_TYPE_VALUE ##### -->
<para>

</para>



<!-- ##### MACRO G_TYPE_VALUE_ARRAY ##### -->
<para>

</para>



<!-- ##### FUNCTION g_value_init ##### -->
<para>
Initializes @value with the default value of @type.
</para>

@value: 		A zero-filled (uninitialized) #GValue structure.
@g_type: 	Type the #GValue should hold values of.
@Returns: 


<!-- ##### FUNCTION g_value_copy ##### -->
<para>
Copies the value of @src_value into @dest_value.
</para>

@src_value: 	An initialized #GValue structure.
@dest_value: 	An initialized #GValue structure of the same type as @src_value.


<!-- ##### FUNCTION g_value_reset ##### -->
<para>
Clears the current value in @value and resets it to the default value
(as if the value had just been initialized).
</para>

@value: 	An initialized #GValue structure.
@Returns: 


<!-- ##### FUNCTION g_value_unset ##### -->
<para>
Clears the current value in @value and "unsets" the type,
this releases all resources associated with this GValue.
An unset value is the same as an uninitialized (zero-filled)
#GValue structure.
</para>

@value: 	An initialized #GValue structure.


<!-- ##### FUNCTION g_value_fits_pointer ##### -->
<para>
Determines if @value will fit inside the size of a pointer value.
This is an internal function introduced mainly for C marshallers.
</para>

@value: 		An initialized #GValue structure.
@Returns: 	#TRUE if @value will fit inside a pointer value.


<!-- ##### FUNCTION g_value_peek_pointer ##### -->
<para>
Return the value contents as pointer. This function asserts that
g_value_fits_pointer() returned #TRUE for the passed in value.
This is an internal function introduced mainly for C marshallers.
</para>

@value: 		An initialized #GValue structure.
@Returns: 	#TRUE if @value will fit inside a pointer value.


<!-- ##### FUNCTION g_value_type_compatible ##### -->
<para>

</para>

@src_type: 
@dest_type: 
@Returns: 


<!-- ##### FUNCTION g_value_type_transformable ##### -->
<para>

</para>

@src_type: 
@dest_type: 
@Returns: 


<!-- ##### FUNCTION g_value_transform ##### -->
<para>

</para>

@src_value: 
@dest_value: 
@Returns: 


<!-- ##### USER_FUNCTION GValueTransform ##### -->
<para>

</para>

@src_value: 
@dest_value: 


<!-- ##### FUNCTION g_value_register_transform_func ##### -->
<para>

</para>

@src_type: 
@dest_type: 
@transform_func: 


<!-- ##### FUNCTION g_strdup_value_contents ##### -->
<para>

</para>

@value: 
@Returns: 


