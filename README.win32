General
=======

For more information about the port or GLib, GTk+ and the GIMP to
native Windows, and pre-built binary packages, see
http://www.iki.fi/tml/gimp/win32/ . "Native" means that we use the
Win32 API only, and not any POSIX emulation layer except that provided
by the Microsoft runtime C library. Additionally, a pthreads emulation
library is used.

To build GLib on Win32, you can use either the Microsoft compiler and
tools, or gcc. Both the compiler from MSVC 5.0 and from MSVC 6.0 have
been used successfully. With gcc I mean egcs-1.1.2 (as distributed by
Mumit Khan), running under cygwin-b20.1. To successfully use gcc,
follow the instructions below. I use gcc -mno-cygwin, i.e. the
produced executables (.exe and .dll files) do *not* require the cygwin
runtime library.

To test the GLib functions, go to the tests subdirectory and enter
`nmake -f makefile.msc check` or `make -f makefile.cygwin check`.

If you would want to use the cygwin tools to generate executables that
*do* use the cygwin runtime, the normal Unix configuration method
should work as if on Unix. But it won't produce DLLs. At least I
haven't succeeded in that.

With a little work, it might be possible to use the ./configure
mechanism also with a "mingw32" configuration.

The following preprocessor macros are used for conditional compilation 
related to Win32:

- WIN32 is defined when compiling for the Win32 platform, regardless
  if using the X11 or Win32 windowing API (in the case of GLib, this
  dimension isn't significant), regardless whether using a more or
  less complete POSIX emulation runtime layer (like Cygwin) or not.

- NATIVE_WIN32 is defined when compiling for Win32, *and* without
  any POSIX emulation, other that to the extent provided by the
  bundled Microsoft C library (msvcrt.dll) and the pthreads-win32
  library. For instance, pathnames are in the native Windows syntax.

The Win32 port uses the combination with both of those on.

Additionally, there are the compiler-specific macros:
- _MSC_VER is defined when using the Microsoft compiler
- __GNUC__ is defined when using GCC (i.e. egcs)

Some of the usage of these macros was a bit mixed up, and had to be
straightened out when adding the gcc support. In particular, I used to
check for _MSC_VER in some places where I really wanted to check for
the Microsoft C library, and those checks has now been changed to
NATIVE_WIN32. NATIVE_WIN32 ought to be renamed to USE_MSVCRT.

Pthreads library
================

Before building you must get the pthreads library for Win32 from
http://sourceware.cygnus.com/pthreads-win32/. The pthreads-win32
snapshot from 1999-04-07 is the one that should be used. Edit the
location of the pthreads library and include files in makefile.msc or
makefile.cygwin. The ptreads distribution includes the precompiled dll
and import libraries both for MSVC and gcc.

The pthreads for Win32 package that the thread support uses supposedly
isn't quite ready yet, and thus threads stuff should not be relied
upon for anything serious.

Building with MSVC
==================

If using the Microsoft toolchain, build with `nmake -f
makefile.msc`. Install with `nmake -f makefile.msc install`. 

Building with gcc
=================

The gcc support was added quite recently, but seems to work. Debugging
with gdb works. I prefer to use the msvcrt runtime and not the default
crtdll. Especially, as the pthread library also uses msvcrt, using
crtdll would probably not be a good idea at all. Using msvcrt can be
achieved by applying the following diff to the specs file, which
typically is installed as
C:\cygnus\cygwin-b20\H-i586-cygwin32\lib\gcc-lib\i586-cygwin32\egcs-2.91.66\specs.

Sorry for the illegibility of this diff, but the specs file is like
that... This patch replaces -lcrtdll with -lmsvcrt, replaces crt1 with
crt2, removes -lmoldname (because that might pull in crtdll.dll), and
defines __MSVCRT__.

--- specs.ORIG	Sun Apr 25 00:40:40 1999
+++ specs	Sun Apr 25 00:48:04 1999
@@ -23 +23 @@
-%{pg:-lgmon}                   %{!mno-cygwin:-lcygwin}                   %{mno-cygwin:-lmingw32 -lmoldname -lcrtdll}                   %{mwindows:-luser32 -lgdi32 -lcomdlg32} 		  -lkernel32 -ladvapi32 -lshell32
+%{pg:-lgmon}                   %{!mno-cygwin:-lcygwin}                   %{mno-cygwin:-lmingw32 -lmsvcrt}                   %{mwindows:-luser32 -lgdi32 -lcomdlg32} 		  -lkernel32 -ladvapi32 -lshell32
@@ -29 +29 @@
-%{mdll: %{!mno-cygwin:dllcrt0%O%s}                                 %{mno-cygwin:dllcrt1%O%s}}                         %{!mdll: %{!mno-cygwin:crt0%O%s}                                  %{mno-cygwin:crt1%O%s} %{pg:gcrt0%O%s}}
+%{mdll: %{!mno-cygwin:dllcrt0%O%s}                                 %{mno-cygwin:dllcrt2%O%s}}                         %{!mdll: %{!mno-cygwin:crt0%O%s}                                  %{mno-cygwin:crt2%O%s} %{pg:gcrt0%O%s}}
@@ -38 +38 @@
--Di386 -D_WIN32   -DWINNT  -D_X86_=1 -D__STDC__=1  -D__stdcall=__attribute__((__stdcall__))   -D__cdecl=__attribute__((__cdecl__))   -D__declspec(x)=__attribute__((x))   -Asystem(winnt) -Acpu(i386) -Amachine(i386)
+-Di386 -D_WIN32 %{mno-cygwin:-D__MSVCRT__ } -DWINNT  -D_X86_=1 -D__STDC__=1  -D__stdcall=__attribute__((__stdcall__))   -D__cdecl=__attribute__((__cdecl__))   -D__declspec(x)=__attribute__((x))   -Asystem(winnt) -Acpu(i386) -Amachine(i386) 

You should also fix the definition of _dev_t in the header
mingw32/sys/types.h to correspond to what type actually is used by
msvcrt.dll. It should be unsigned int, not short. Otherwise stat()
calls will fail.

You also will have to get the mingw32 source snapshot from
http://www.geocities.com/Tokyo/Towers/6162/mingw32_980701_tar.gz (this
is the source to the "mingw32" part of Mumit Khan's egcs-1.1.2
distribution.) Unpack it and fix the prototype and call to
__getmainargs() in init.c to include one more parameter, an int *,
which should be passed the address of a zero int. Code snippets below:

...
#ifdef __MSVCRT__
extern void __getmainargs(int *, char***, char***, int, int *);
#else
...
#ifdef __MSVCRT__
	int newmode = 0;
	(void) __getmainargs(&_argc, &_argv, &dummy_environ, _CRT_glob, &newmode);
#else
...

Remake dllcrt2.o (which is the file which gets linked into dlls when
using msvcrt, as per the specs file above), and move it into place
(typically C:\cygnus\cygwin-b20\H-i586-cygwin32\i586-cygwin32\lib\dllcrt2.o).

Next, go back to the GLib directory and build using `make -f makefile.cygwin`.
